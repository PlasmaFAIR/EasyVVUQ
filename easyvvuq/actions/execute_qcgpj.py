import base64
import json
from os import environ

import time

import dill
from typing import Tuple, Dict, Any

from concurrent.futures import Executor

from actions.execute_local import ExecuteQCGPJ
from qcg.pilotjob.executor_api.qcgpj_executor import QCGPJExecutor
from qcg.pilotjob.executor_api.templates.qcgpj_template import QCGPJTemplate


class EasyVVUQBasicTemplate(QCGPJTemplate):
    """A basic template class for submission of QCG-PilotJob tasks

    The class can be used only for the most simple use-cases. For example it doesn't allow
    to specify resource requirements. Thus, for more advanced use-cases, it is recommended to provide custom
    implementation of QCGPJTemplate. For complete reference of QCG-PilotJob task's description parameters
    please look at https://qcg-pilotjob.readthedocs.io/en/latest/fileinterface.html#submit
    """
    @staticmethod
    def template() -> Tuple[str, Dict[str, Any]]:
        template = """
            {
                'name': '${name}',
                'execution': {
                    'exec': '${exec}',
                    'args': ${args},
                    'stdout': '${stdout}',
                    'stderr': '${stderr}',
                    'venv': '${venv}'
                }
            }
             """

        defaults = {
            'args': [],
            'stdout': 'stdout',
            'stderr': 'stderr'
        }

        return template, defaults


class QCGPJPool(Executor):
    """A Pool that manages execution of actions with QCG-PilotJob.

    Parameters
    ----------
    qcgpj_executor: str
        An instance of QCGPJExecutor. If not provided, an instance of QCGPJExecutor
        with default settings will be created
    template: QCGPJTemplate
        An object which contains only a single method `template` that returns a tuple.
        The first element of a tuple should be a string representing a QCG-PilotJob task's description
        with placeholders (identifiers preceded by $ symbol)
        and the second a dictionary that assigns default values for selected placeholders.
        If not provided, a default EasyVVUQBasicTemplate will be used
    template_params: dict
        A dictionary that contains parameters that will be used to substitute placeholders
        defined in the template
    polling_interval: int
        An interval between queries to QCG-PilotJob manager about state of the tasks, in seconds.
    """
    def __init__(self, qcgpj_executor=None, template=None, template_params=None, polling_interval=1):
        if qcgpj_executor is None:
            qcgpj_executor = QCGPJExecutor()
        if template is None:
            template = EasyVVUQBasicTemplate()

        self._qcgpj_executor = qcgpj_executor
        self._template = template
        self._template_params = template_params
        self._polling_interval = polling_interval
        self._campaign_dir = None

    def submit(self, fn, *args, **kwargs):
        """Submits a callable to be executed by QCG-PilotJob.

        Schedules the callable to be executed inside a QCG-PilotJob's task and returns
        a Future representing the execution of the callable.

        Returns
        -------
            QCGPJFuture representing the given call.
        """
        actions = fn.__self__
        actions.set_wrapper(QCGPJPool._wrapper)
        exec = 'python3 -m easyvvuq.actions.execute_qcgpj_task'

        pickled_actions = base64.b64encode(dill.dumps(actions)).decode('ascii')
        pickled_previous = base64.b64encode(dill.dumps(args[0])).decode('ascii')

        self._campaign_dir = args[0]['campaign_dir']

        return self._qcgpj_executor.submit(
            self._template.template,
            self._template_params,
            exec=exec,
            name=args[0]['run_id'],
            stdout=f"{self._campaign_dir}/stdout_{args[0]['run_id']}",
            stderr=f"{self._campaign_dir}/stderr_{args[0]['run_id']}",
            args=[pickled_actions, pickled_previous])

    def convert_results(self, result_qcgpj):
        """Converts results generated by QCG-PilotJob task to EasyVVUQ-compatible form

        The method loads results data from a file where it was stored by QCG-PilotJob's task
        and then converts it to a dictionary which can be further processed by EasyVVUQ.

        Parameters
        ----------
        result_qcgpj: list
            A list of results returned by QCG-PilotJob task (only the first element will be used)

        Returns
        -------
            A dictionary containing results
        """

        for key, value in result_qcgpj.items():
            if value != 'SUCCEED':
                print(f"Exit status for task {key}: {value}")
            assert value == 'SUCCEED'
            with open(f'{self._campaign_dir}/.qcgpj_result_{key}', 'r') as f:
                previous = json.load(f)
                return previous

    def shutdown(self, **kwargs):
        """Clean-up the resources associated with the QCGPJPool.
        """
        return self._qcgpj_executor.shutdown()

    @staticmethod
    def as_completed(self, features):
        """Checks for the status of features and yields those that are finished
        """

        pending = set(features)
        finished = set()

        for f in features:
            if f.done():
                finished.add(f)
        pending = pending - finished

        while finished:
            yield finished.pop()

        while pending:
            for f in pending:
                if f.done():
                    finished.add(f)
            pending = pending - finished

            while finished:
                yield finished.pop()

            time.sleep(self._polling_interval)

    @staticmethod
    def _wrapper(action, previous):
        """For the actions other than ExecuteQCGPJ ensures that the MPI code is invoked in a serial mode
        """
        if not isinstance(action, ExecuteQCGPJ):
            rank = 0
            if 'OMPI_COMM_WORLD_RANK' in environ:
                rank = environ.get('OMPI_COMM_WORLD_RANK')
            elif 'PMI_RANK' in environ:
                rank = environ.get('PMI_RANK')

            if rank != 0:
                # This is not an instance of ExecuteQCGPJ,We don't execute processes with ranks other than 0
                return

        return action.start(previous)
